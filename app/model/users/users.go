// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package users

// Fill with you ideas below.

import (
	"errors"
	"log"
	"time"

	"github.com/jinzhu/gorm"
)

//用户信息
type User struct {
	UserID   string `gorm:"primary_key"`
	Name     string `gorm:"size:255;not null"`
	Tel      string `gorm:"not null;unique_index"`
	Password string `gorm:"not null"`
	Position string `gorm:"not null"`
}

var db *gorm.DB

// Init 初始化
func Init(link string) {
	var err error
	db, err = gorm.Open("mysql", link+"?charset=utf8&parseTime=True&loc=Local")
	if err != nil {
		log.Fatalln("failed to connect database, ", err)
	}
	db.DB().SetConnMaxLifetime(60 * time.Second)
	// db.LogMode(true)
	db.AutoMigrate(&User{})
}

// VerifyUser 验证用户账号密码
func VerifyUser(tel string, password string) (*User, error) {
	var user User
	if db.Table("users").Where("tel = ? and password = ?", tel, password).First(&user).RecordNotFound() {
		return nil, errors.New("账号或密码错误")
	}
	//h := md5.New()
	//h.Write([]byte(user.Password))
	//
	//if hex.EncodeToString(h.Sum(nil)) != password {
	//	return nil, errors.New("密码错误")
	//}

	return &user, nil
}

//获取用户信息
func GetUser(userID string) *User {
	var user User
	db.Table("users").Where("user_id = ?", userID).Select("user_id, name, tel,position").First(&user)
	return &user
}

//修改密码
func UpdatePassword(userID string, newPassword string) error {
	return db.Table("users").Where("user_id = ?", userID).UpdateColumn("password", newPassword).Error
}
